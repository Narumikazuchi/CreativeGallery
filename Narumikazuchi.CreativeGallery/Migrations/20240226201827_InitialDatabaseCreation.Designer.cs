// <auto-generated />
#pragma warning disable
#nullable disable

using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Narumikazuchi.CreativeGallery.Data;

namespace Narumikazuchi.CreativeGallery.Migrations;

[DbContext(typeof(GlobalDatabaseContext))]
[Migration("20240226201827_InitialDatabaseCreation")]
partial class InitialDatabaseCreation
{
    /// <inheritdoc />
    protected override void BuildTargetModel(ModelBuilder modelBuilder)
    {
#pragma warning disable 612, 618
        modelBuilder.HasAnnotation("ProductVersion", "8.0.2");

        modelBuilder.Entity("Narumikazuchi.CreativeGallery.Data.Albums.AlbumModel", b =>
            {
                b.Property<Guid>("Identifier")
                    .ValueGeneratedOnAdd()
                    .HasColumnType("TEXT");

                b.Property<DateTime>("CreatedAt")
                    .HasColumnType("TEXT");

                b.Property<DateTime>("LastModifiedAt")
                    .HasColumnType("TEXT");

                b.Property<string>("Name")
                    .IsRequired()
                    .HasColumnType("TEXT");

                b.Property<Guid>("OwnerIdentifier")
                    .HasColumnType("TEXT");

                b.Property<int>("Visibility")
                    .HasColumnType("INTEGER");

                b.HasKey("Identifier");

                b.HasIndex("OwnerIdentifier");

                b.ToTable("Albums");
            });

        modelBuilder.Entity("Narumikazuchi.CreativeGallery.Data.CreativeWorks.CreativeWorkModel", b =>
            {
                b.Property<Guid>("Identifier")
                    .ValueGeneratedOnAdd()
                    .HasColumnType("TEXT");

                b.Property<DateTime>("CreatedAt")
                    .HasColumnType("TEXT");

                b.Property<string>("Filename")
                    .IsRequired()
                    .HasColumnType("TEXT");

                b.Property<DateTime>("LastModifiedAt")
                    .HasColumnType("TEXT");

                b.Property<Guid>("OwnerIdentifier")
                    .HasColumnType("TEXT");

                b.Property<int>("Visibility")
                    .HasColumnType("INTEGER");

                b.HasKey("Identifier");

                b.HasIndex("OwnerIdentifier");

                b.ToTable("CreativeWorks");
            });

        modelBuilder.Entity("Narumikazuchi.CreativeGallery.Data.Permissions.PermissionModel", b =>
            {
                b.Property<Guid>("Identifier")
                    .ValueGeneratedOnAdd()
                    .HasColumnType("TEXT");

                b.Property<bool>("CanBeDeleted")
                    .HasColumnType("INTEGER");

                b.Property<string>("Name")
                    .IsRequired()
                    .HasColumnType("TEXT");

                b.HasKey("Identifier");

                b.ToTable("Permissions");
            });

        modelBuilder.Entity("Narumikazuchi.CreativeGallery.Data.Permissions.RestrictionModel", b =>
            {
                b.Property<Guid>("Identifier")
                    .ValueGeneratedOnAdd()
                    .HasColumnType("TEXT");

                b.Property<string>("Name")
                    .IsRequired()
                    .HasColumnType("TEXT");

                b.HasKey("Identifier");

                b.ToTable("RestrictionModel");
            });

        modelBuilder.Entity("Narumikazuchi.CreativeGallery.Data.Search.SearchResultModel", b =>
            {
                b.Property<Guid>("Identifier")
                    .ValueGeneratedOnAdd()
                    .HasColumnType("TEXT");

                b.Property<uint>("Count")
                    .HasColumnType("INTEGER");

                b.Property<string>("ExtraParameters")
                    .IsRequired()
                    .HasColumnType("TEXT");

                b.Property<int>("Type")
                    .HasColumnType("INTEGER");

                b.Property<string>("Value")
                    .IsRequired()
                    .HasColumnType("TEXT");

                b.HasKey("Identifier");

                b.HasIndex("Value");

                b.ToTable("SearchQuery");
            });

        modelBuilder.Entity("Narumikazuchi.CreativeGallery.Data.Tags.TagModel", b =>
            {
                b.Property<Guid>("Identifier")
                    .ValueGeneratedOnAdd()
                    .HasColumnType("TEXT");

                b.Property<DateTime>("CreatedAt")
                    .HasColumnType("TEXT");

                b.Property<string>("Name")
                    .IsRequired()
                    .HasColumnType("TEXT");

                b.Property<int>("Rating")
                    .HasColumnType("INTEGER");

                b.HasKey("Identifier");

                b.ToTable("Tags");
            });

        modelBuilder.Entity("Narumikazuchi.CreativeGallery.Data.Users.AuthenticationModel", b =>
            {
                b.Property<Guid>("Identifier")
                    .ValueGeneratedOnAdd()
                    .HasColumnType("TEXT");

                b.Property<byte[]>("StoredKey")
                    .IsRequired()
                    .HasColumnType("BLOB");

                b.Property<int>("Type")
                    .HasColumnType("INTEGER");

                b.Property<Guid>("UserIdentifier")
                    .HasColumnType("TEXT");

                b.HasKey("Identifier");

                b.HasIndex("UserIdentifier");

                b.ToTable("Authentications");
            });

        modelBuilder.Entity("Narumikazuchi.CreativeGallery.Data.Users.UserModel", b =>
            {
                b.Property<Guid>("Identifier")
                    .ValueGeneratedOnAdd()
                    .HasColumnType("TEXT");

                b.Property<DateTime>("CreatedAt")
                    .HasColumnType("TEXT");

                b.Property<string>("DisplayName")
                    .IsRequired()
                    .HasColumnType("TEXT");

                b.Property<string>("Email")
                    .IsRequired()
                    .HasColumnType("TEXT");

                b.Property<DateTime>("LastModifiedAt")
                    .HasColumnType("TEXT");

                b.Property<byte[]>("ProfilePicture")
                    .IsRequired()
                    .HasColumnType("BLOB");

                b.Property<string>("Username")
                    .IsRequired()
                    .HasColumnType("TEXT");

                b.Property<int>("Visibility")
                    .HasColumnType("INTEGER");

                b.HasKey("Identifier");

                b.ToTable("Users");
            });

        modelBuilder.Entity("RestrictedByPermissions", b =>
            {
                b.Property<Guid>("RestrictionIdentifier")
                    .HasColumnType("TEXT");

                b.Property<Guid>("PermissionIdentifier")
                    .HasColumnType("TEXT");

                b.Property<Guid>("AllowedForIdentifier")
                    .HasColumnType("TEXT");

                b.Property<Guid>("AllowsIdentifier")
                    .HasColumnType("TEXT");

                b.HasKey("RestrictionIdentifier", "PermissionIdentifier");

                b.HasIndex("AllowedForIdentifier");

                b.HasIndex("AllowsIdentifier");

                b.ToTable("RestrictedByPermissions");
            });

        modelBuilder.Entity("UserBookmarkedAlbums", b =>
            {
                b.Property<Guid>("UserIdentifier")
                    .HasColumnType("TEXT");

                b.Property<Guid>("AlbumIdentifier")
                    .HasColumnType("TEXT");

                b.Property<Guid>("BookmarkedAlbumsIdentifier")
                    .HasColumnType("TEXT");

                b.Property<Guid>("BookmarkedByUsersIdentifier")
                    .HasColumnType("TEXT");

                b.HasKey("UserIdentifier", "AlbumIdentifier");

                b.HasIndex("BookmarkedAlbumsIdentifier");

                b.HasIndex("BookmarkedByUsersIdentifier");

                b.ToTable("UserBookmarkedAlbums");
            });

        modelBuilder.Entity("UserBookmarkedWorks", b =>
            {
                b.Property<Guid>("UserIdentifier")
                    .HasColumnType("TEXT");

                b.Property<Guid>("CreativeWorkIdentifier")
                    .HasColumnType("TEXT");

                b.Property<Guid>("BookmarkedByUsersIdentifier")
                    .HasColumnType("TEXT");

                b.Property<Guid>("BookmarkedWorksIdentifier")
                    .HasColumnType("TEXT");

                b.HasKey("UserIdentifier", "CreativeWorkIdentifier");

                b.HasIndex("BookmarkedByUsersIdentifier");

                b.HasIndex("BookmarkedWorksIdentifier");

                b.ToTable("UserBookmarkedWorks");
            });

        modelBuilder.Entity("UserFollows", b =>
            {
                b.Property<Guid>("UserIdentifier")
                    .HasColumnType("TEXT");

                b.Property<Guid>("CreatorIdentifier")
                    .HasColumnType("TEXT");

                b.Property<Guid>("FollowsUsersIdentifier")
                    .HasColumnType("TEXT");

                b.HasKey("UserIdentifier", "CreatorIdentifier");

                b.HasIndex("FollowsUsersIdentifier");

                b.ToTable("UserFollows");
            });

        modelBuilder.Entity("UserLikedAlbums", b =>
            {
                b.Property<Guid>("UserIdentifier")
                    .HasColumnType("TEXT");

                b.Property<Guid>("AlbumIdentifier")
                    .HasColumnType("TEXT");

                b.Property<Guid>("LikedAlbumsIdentifier")
                    .HasColumnType("TEXT");

                b.Property<Guid>("LikedByUsersIdentifier")
                    .HasColumnType("TEXT");

                b.HasKey("UserIdentifier", "AlbumIdentifier");

                b.HasIndex("LikedAlbumsIdentifier");

                b.HasIndex("LikedByUsersIdentifier");

                b.ToTable("UserLikedAlbums");
            });

        modelBuilder.Entity("UserLikedWorks", b =>
            {
                b.Property<Guid>("UserIdentifier")
                    .HasColumnType("TEXT");

                b.Property<Guid>("CreativeWorkIdentifier")
                    .HasColumnType("TEXT");

                b.Property<Guid>("LikedByUsersIdentifier")
                    .HasColumnType("TEXT");

                b.Property<Guid>("LikedWorksIdentifier")
                    .HasColumnType("TEXT");

                b.HasKey("UserIdentifier", "CreativeWorkIdentifier");

                b.HasIndex("LikedByUsersIdentifier");

                b.HasIndex("LikedWorksIdentifier");

                b.ToTable("UserLikedWorks");
            });

        modelBuilder.Entity("UserPermissions", b =>
            {
                b.Property<Guid>("UserIdentifier")
                    .HasColumnType("TEXT");

                b.Property<Guid>("PermissionIdentifier")
                    .HasColumnType("TEXT");

                b.Property<Guid>("PermissionsIdentifier")
                    .HasColumnType("TEXT");

                b.Property<Guid>("UsersIdentifier")
                    .HasColumnType("TEXT");

                b.HasKey("UserIdentifier", "PermissionIdentifier");

                b.HasIndex("PermissionsIdentifier");

                b.HasIndex("UsersIdentifier");

                b.ToTable("UserPermissions");
            });

        modelBuilder.Entity("WorksInAlbum", b =>
            {
                b.Property<Guid>("AlbumIdentifier")
                    .HasColumnType("TEXT");

                b.Property<Guid>("CreativeWorkIdentifier")
                    .HasColumnType("TEXT");

                b.Property<Guid>("PartOfAlbumIdentifier")
                    .HasColumnType("TEXT");

                b.Property<Guid>("WorksIdentifier")
                    .HasColumnType("TEXT");

                b.HasKey("AlbumIdentifier", "CreativeWorkIdentifier");

                b.HasIndex("PartOfAlbumIdentifier");

                b.HasIndex("WorksIdentifier");

                b.ToTable("WorksInAlbum");
            });

        modelBuilder.Entity("WorksTaggedWith", b =>
            {
                b.Property<Guid>("CreativeWorkIdentifier")
                    .HasColumnType("TEXT");

                b.Property<Guid>("TagIdentifier")
                    .HasColumnType("TEXT");

                b.Property<Guid>("TaggedWorksIdentifier")
                    .HasColumnType("TEXT");

                b.Property<Guid>("TagsIdentifier")
                    .HasColumnType("TEXT");

                b.HasKey("CreativeWorkIdentifier", "TagIdentifier");

                b.HasIndex("TaggedWorksIdentifier");

                b.HasIndex("TagsIdentifier");

                b.ToTable("WorksTaggedWith");
            });

        modelBuilder.Entity("Narumikazuchi.CreativeGallery.Data.Albums.AlbumModel", b =>
            {
                b.HasOne("Narumikazuchi.CreativeGallery.Data.Users.UserModel", "Owner")
                    .WithMany("OwnedAlbums")
                    .HasForeignKey("OwnerIdentifier")
                    .OnDelete(DeleteBehavior.Cascade)
                    .IsRequired();

                b.Navigation("Owner");
            });

        modelBuilder.Entity("Narumikazuchi.CreativeGallery.Data.CreativeWorks.CreativeWorkModel", b =>
            {
                b.HasOne("Narumikazuchi.CreativeGallery.Data.Users.UserModel", "Owner")
                    .WithMany("OwnedWorks")
                    .HasForeignKey("OwnerIdentifier")
                    .OnDelete(DeleteBehavior.Cascade)
                    .IsRequired();

                b.Navigation("Owner");
            });

        modelBuilder.Entity("Narumikazuchi.CreativeGallery.Data.Users.AuthenticationModel", b =>
            {
                b.HasOne("Narumikazuchi.CreativeGallery.Data.Users.UserModel", "User")
                    .WithMany("Authentications")
                    .HasForeignKey("UserIdentifier")
                    .OnDelete(DeleteBehavior.Cascade)
                    .IsRequired();

                b.Navigation("User");
            });

        modelBuilder.Entity("RestrictedByPermissions", b =>
            {
                b.HasOne("Narumikazuchi.CreativeGallery.Data.Permissions.PermissionModel", null)
                    .WithMany()
                    .HasForeignKey("AllowedForIdentifier")
                    .OnDelete(DeleteBehavior.Cascade)
                    .IsRequired();

                b.HasOne("Narumikazuchi.CreativeGallery.Data.Permissions.RestrictionModel", null)
                    .WithMany()
                    .HasForeignKey("AllowsIdentifier")
                    .OnDelete(DeleteBehavior.Cascade)
                    .IsRequired();
            });

        modelBuilder.Entity("UserBookmarkedAlbums", b =>
            {
                b.HasOne("Narumikazuchi.CreativeGallery.Data.Albums.AlbumModel", null)
                    .WithMany()
                    .HasForeignKey("BookmarkedAlbumsIdentifier")
                    .OnDelete(DeleteBehavior.Cascade)
                    .IsRequired();

                b.HasOne("Narumikazuchi.CreativeGallery.Data.Users.UserModel", null)
                    .WithMany()
                    .HasForeignKey("BookmarkedByUsersIdentifier")
                    .OnDelete(DeleteBehavior.Cascade)
                    .IsRequired();
            });

        modelBuilder.Entity("UserBookmarkedWorks", b =>
            {
                b.HasOne("Narumikazuchi.CreativeGallery.Data.Users.UserModel", null)
                    .WithMany()
                    .HasForeignKey("BookmarkedByUsersIdentifier")
                    .OnDelete(DeleteBehavior.Cascade)
                    .IsRequired();

                b.HasOne("Narumikazuchi.CreativeGallery.Data.CreativeWorks.CreativeWorkModel", null)
                    .WithMany()
                    .HasForeignKey("BookmarkedWorksIdentifier")
                    .OnDelete(DeleteBehavior.Cascade)
                    .IsRequired();
            });

        modelBuilder.Entity("UserFollows", b =>
            {
                b.HasOne("Narumikazuchi.CreativeGallery.Data.Users.UserModel", null)
                    .WithMany()
                    .HasForeignKey("FollowsUsersIdentifier")
                    .OnDelete(DeleteBehavior.Cascade)
                    .IsRequired();
            });

        modelBuilder.Entity("UserLikedAlbums", b =>
            {
                b.HasOne("Narumikazuchi.CreativeGallery.Data.Albums.AlbumModel", null)
                    .WithMany()
                    .HasForeignKey("LikedAlbumsIdentifier")
                    .OnDelete(DeleteBehavior.Cascade)
                    .IsRequired();

                b.HasOne("Narumikazuchi.CreativeGallery.Data.Users.UserModel", null)
                    .WithMany()
                    .HasForeignKey("LikedByUsersIdentifier")
                    .OnDelete(DeleteBehavior.Cascade)
                    .IsRequired();
            });

        modelBuilder.Entity("UserLikedWorks", b =>
            {
                b.HasOne("Narumikazuchi.CreativeGallery.Data.Users.UserModel", null)
                    .WithMany()
                    .HasForeignKey("LikedByUsersIdentifier")
                    .OnDelete(DeleteBehavior.Cascade)
                    .IsRequired();

                b.HasOne("Narumikazuchi.CreativeGallery.Data.CreativeWorks.CreativeWorkModel", null)
                    .WithMany()
                    .HasForeignKey("LikedWorksIdentifier")
                    .OnDelete(DeleteBehavior.Cascade)
                    .IsRequired();
            });

        modelBuilder.Entity("UserPermissions", b =>
            {
                b.HasOne("Narumikazuchi.CreativeGallery.Data.Permissions.PermissionModel", null)
                    .WithMany()
                    .HasForeignKey("PermissionsIdentifier")
                    .OnDelete(DeleteBehavior.Cascade)
                    .IsRequired();

                b.HasOne("Narumikazuchi.CreativeGallery.Data.Users.UserModel", null)
                    .WithMany()
                    .HasForeignKey("UsersIdentifier")
                    .OnDelete(DeleteBehavior.Cascade)
                    .IsRequired();
            });

        modelBuilder.Entity("WorksInAlbum", b =>
            {
                b.HasOne("Narumikazuchi.CreativeGallery.Data.Albums.AlbumModel", null)
                    .WithMany()
                    .HasForeignKey("PartOfAlbumIdentifier")
                    .OnDelete(DeleteBehavior.Cascade)
                    .IsRequired();

                b.HasOne("Narumikazuchi.CreativeGallery.Data.CreativeWorks.CreativeWorkModel", null)
                    .WithMany()
                    .HasForeignKey("WorksIdentifier")
                    .OnDelete(DeleteBehavior.Cascade)
                    .IsRequired();
            });

        modelBuilder.Entity("WorksTaggedWith", b =>
            {
                b.HasOne("Narumikazuchi.CreativeGallery.Data.CreativeWorks.CreativeWorkModel", null)
                    .WithMany()
                    .HasForeignKey("TaggedWorksIdentifier")
                    .OnDelete(DeleteBehavior.Cascade)
                    .IsRequired();

                b.HasOne("Narumikazuchi.CreativeGallery.Data.Tags.TagModel", null)
                    .WithMany()
                    .HasForeignKey("TagsIdentifier")
                    .OnDelete(DeleteBehavior.Cascade)
                    .IsRequired();
            });

        modelBuilder.Entity("Narumikazuchi.CreativeGallery.Data.Users.UserModel", b =>
            {
                b.Navigation("Authentications");

                b.Navigation("OwnedAlbums");

                b.Navigation("OwnedWorks");
            });
#pragma warning restore 612, 618
    }
}

// <auto-generated />
#pragma warning disable
#nullable disable

using Microsoft.EntityFrameworkCore.Migrations;

namespace Narumikazuchi.CreativeGallery.Migrations;

/// <inheritdoc />
public partial class InitialDatabaseCreation : Migration
{
    /// <inheritdoc />
    protected override void Up(MigrationBuilder migrationBuilder)
    {
        migrationBuilder.CreateTable(
            name: "Permissions",
            columns: table => new
            {
                Identifier = table.Column<Guid>(type: "TEXT", nullable: false),
                Name = table.Column<string>(type: "TEXT", nullable: false),
                CanBeDeleted = table.Column<bool>(type: "INTEGER", nullable: false)
            },
            constraints: table =>
            {
                table.PrimaryKey("PK_Permissions", x => x.Identifier);
            });

        migrationBuilder.CreateTable(
            name: "RestrictionModel",
            columns: table => new
            {
                Identifier = table.Column<Guid>(type: "TEXT", nullable: false),
                Name = table.Column<string>(type: "TEXT", nullable: false)
            },
            constraints: table =>
            {
                table.PrimaryKey("PK_RestrictionModel", x => x.Identifier);
            });

        migrationBuilder.CreateTable(
            name: "SearchQuery",
            columns: table => new
            {
                Identifier = table.Column<Guid>(type: "TEXT", nullable: false),
                Value = table.Column<string>(type: "TEXT", nullable: false),
                Count = table.Column<uint>(type: "INTEGER", nullable: false),
                Type = table.Column<int>(type: "INTEGER", nullable: false),
                ExtraParameters = table.Column<string>(type: "TEXT", nullable: false)
            },
            constraints: table =>
            {
                table.PrimaryKey("PK_SearchQuery", x => x.Identifier);
            });

        migrationBuilder.CreateTable(
            name: "Tags",
            columns: table => new
            {
                Identifier = table.Column<Guid>(type: "TEXT", nullable: false),
                Name = table.Column<string>(type: "TEXT", nullable: false),
                Rating = table.Column<int>(type: "INTEGER", nullable: false),
                CreatedAt = table.Column<DateTime>(type: "TEXT", nullable: false)
            },
            constraints: table =>
            {
                table.PrimaryKey("PK_Tags", x => x.Identifier);
            });

        migrationBuilder.CreateTable(
            name: "Users",
            columns: table => new
            {
                Identifier = table.Column<Guid>(type: "TEXT", nullable: false),
                Username = table.Column<string>(type: "TEXT", nullable: false),
                DisplayName = table.Column<string>(type: "TEXT", nullable: false),
                Email = table.Column<string>(type: "TEXT", nullable: false),
                Visibility = table.Column<int>(type: "INTEGER", nullable: false),
                CreatedAt = table.Column<DateTime>(type: "TEXT", nullable: false),
                LastModifiedAt = table.Column<DateTime>(type: "TEXT", nullable: false),
                ProfilePicture = table.Column<byte[]>(type: "BLOB", nullable: false)
            },
            constraints: table =>
            {
                table.PrimaryKey("PK_Users", x => x.Identifier);
            });

        migrationBuilder.CreateTable(
            name: "RestrictedByPermissions",
            columns: table => new
            {
                RestrictionIdentifier = table.Column<Guid>(type: "TEXT", nullable: false),
                PermissionIdentifier = table.Column<Guid>(type: "TEXT", nullable: false),
                AllowedForIdentifier = table.Column<Guid>(type: "TEXT", nullable: false),
                AllowsIdentifier = table.Column<Guid>(type: "TEXT", nullable: false)
            },
            constraints: table =>
            {
                table.PrimaryKey("PK_RestrictedByPermissions", x => new { x.RestrictionIdentifier, x.PermissionIdentifier });
                table.ForeignKey(
                    name: "FK_RestrictedByPermissions_Permissions_AllowedForIdentifier",
                    column: x => x.AllowedForIdentifier,
                    principalTable: "Permissions",
                    principalColumn: "Identifier",
                    onDelete: ReferentialAction.Cascade);
                table.ForeignKey(
                    name: "FK_RestrictedByPermissions_RestrictionModel_AllowsIdentifier",
                    column: x => x.AllowsIdentifier,
                    principalTable: "RestrictionModel",
                    principalColumn: "Identifier",
                    onDelete: ReferentialAction.Cascade);
            });

        migrationBuilder.CreateTable(
            name: "Albums",
            columns: table => new
            {
                Identifier = table.Column<Guid>(type: "TEXT", nullable: false),
                Name = table.Column<string>(type: "TEXT", nullable: false),
                Visibility = table.Column<int>(type: "INTEGER", nullable: false),
                CreatedAt = table.Column<DateTime>(type: "TEXT", nullable: false),
                LastModifiedAt = table.Column<DateTime>(type: "TEXT", nullable: false),
                OwnerIdentifier = table.Column<Guid>(type: "TEXT", nullable: false)
            },
            constraints: table =>
            {
                table.PrimaryKey("PK_Albums", x => x.Identifier);
                table.ForeignKey(
                    name: "FK_Albums_Users_OwnerIdentifier",
                    column: x => x.OwnerIdentifier,
                    principalTable: "Users",
                    principalColumn: "Identifier",
                    onDelete: ReferentialAction.Cascade);
            });

        migrationBuilder.CreateTable(
            name: "Authentications",
            columns: table => new
            {
                Identifier = table.Column<Guid>(type: "TEXT", nullable: false),
                UserIdentifier = table.Column<Guid>(type: "TEXT", nullable: false),
                Type = table.Column<int>(type: "INTEGER", nullable: false),
                StoredKey = table.Column<byte[]>(type: "BLOB", nullable: false)
            },
            constraints: table =>
            {
                table.PrimaryKey("PK_Authentications", x => x.Identifier);
                table.ForeignKey(
                    name: "FK_Authentications_Users_UserIdentifier",
                    column: x => x.UserIdentifier,
                    principalTable: "Users",
                    principalColumn: "Identifier",
                    onDelete: ReferentialAction.Cascade);
            });

        migrationBuilder.CreateTable(
            name: "CreativeWorks",
            columns: table => new
            {
                Identifier = table.Column<Guid>(type: "TEXT", nullable: false),
                Filename = table.Column<string>(type: "TEXT", nullable: false),
                Visibility = table.Column<int>(type: "INTEGER", nullable: false),
                CreatedAt = table.Column<DateTime>(type: "TEXT", nullable: false),
                LastModifiedAt = table.Column<DateTime>(type: "TEXT", nullable: false),
                OwnerIdentifier = table.Column<Guid>(type: "TEXT", nullable: false)
            },
            constraints: table =>
            {
                table.PrimaryKey("PK_CreativeWorks", x => x.Identifier);
                table.ForeignKey(
                    name: "FK_CreativeWorks_Users_OwnerIdentifier",
                    column: x => x.OwnerIdentifier,
                    principalTable: "Users",
                    principalColumn: "Identifier",
                    onDelete: ReferentialAction.Cascade);
            });

        migrationBuilder.CreateTable(
            name: "UserFollows",
            columns: table => new
            {
                UserIdentifier = table.Column<Guid>(type: "TEXT", nullable: false),
                CreatorIdentifier = table.Column<Guid>(type: "TEXT", nullable: false),
                FollowsUsersIdentifier = table.Column<Guid>(type: "TEXT", nullable: false)
            },
            constraints: table =>
            {
                table.PrimaryKey("PK_UserFollows", x => new { x.UserIdentifier, x.CreatorIdentifier });
                table.ForeignKey(
                    name: "FK_UserFollows_Users_FollowsUsersIdentifier",
                    column: x => x.FollowsUsersIdentifier,
                    principalTable: "Users",
                    principalColumn: "Identifier",
                    onDelete: ReferentialAction.Cascade);
            });

        migrationBuilder.CreateTable(
            name: "UserPermissions",
            columns: table => new
            {
                UserIdentifier = table.Column<Guid>(type: "TEXT", nullable: false),
                PermissionIdentifier = table.Column<Guid>(type: "TEXT", nullable: false),
                PermissionsIdentifier = table.Column<Guid>(type: "TEXT", nullable: false),
                UsersIdentifier = table.Column<Guid>(type: "TEXT", nullable: false)
            },
            constraints: table =>
            {
                table.PrimaryKey("PK_UserPermissions", x => new { x.UserIdentifier, x.PermissionIdentifier });
                table.ForeignKey(
                    name: "FK_UserPermissions_Permissions_PermissionsIdentifier",
                    column: x => x.PermissionsIdentifier,
                    principalTable: "Permissions",
                    principalColumn: "Identifier",
                    onDelete: ReferentialAction.Cascade);
                table.ForeignKey(
                    name: "FK_UserPermissions_Users_UsersIdentifier",
                    column: x => x.UsersIdentifier,
                    principalTable: "Users",
                    principalColumn: "Identifier",
                    onDelete: ReferentialAction.Cascade);
            });

        migrationBuilder.CreateTable(
            name: "UserBookmarkedAlbums",
            columns: table => new
            {
                UserIdentifier = table.Column<Guid>(type: "TEXT", nullable: false),
                AlbumIdentifier = table.Column<Guid>(type: "TEXT", nullable: false),
                BookmarkedAlbumsIdentifier = table.Column<Guid>(type: "TEXT", nullable: false),
                BookmarkedByUsersIdentifier = table.Column<Guid>(type: "TEXT", nullable: false)
            },
            constraints: table =>
            {
                table.PrimaryKey("PK_UserBookmarkedAlbums", x => new { x.UserIdentifier, x.AlbumIdentifier });
                table.ForeignKey(
                    name: "FK_UserBookmarkedAlbums_Albums_BookmarkedAlbumsIdentifier",
                    column: x => x.BookmarkedAlbumsIdentifier,
                    principalTable: "Albums",
                    principalColumn: "Identifier",
                    onDelete: ReferentialAction.Cascade);
                table.ForeignKey(
                    name: "FK_UserBookmarkedAlbums_Users_BookmarkedByUsersIdentifier",
                    column: x => x.BookmarkedByUsersIdentifier,
                    principalTable: "Users",
                    principalColumn: "Identifier",
                    onDelete: ReferentialAction.Cascade);
            });

        migrationBuilder.CreateTable(
            name: "UserLikedAlbums",
            columns: table => new
            {
                UserIdentifier = table.Column<Guid>(type: "TEXT", nullable: false),
                AlbumIdentifier = table.Column<Guid>(type: "TEXT", nullable: false),
                LikedAlbumsIdentifier = table.Column<Guid>(type: "TEXT", nullable: false),
                LikedByUsersIdentifier = table.Column<Guid>(type: "TEXT", nullable: false)
            },
            constraints: table =>
            {
                table.PrimaryKey("PK_UserLikedAlbums", x => new { x.UserIdentifier, x.AlbumIdentifier });
                table.ForeignKey(
                    name: "FK_UserLikedAlbums_Albums_LikedAlbumsIdentifier",
                    column: x => x.LikedAlbumsIdentifier,
                    principalTable: "Albums",
                    principalColumn: "Identifier",
                    onDelete: ReferentialAction.Cascade);
                table.ForeignKey(
                    name: "FK_UserLikedAlbums_Users_LikedByUsersIdentifier",
                    column: x => x.LikedByUsersIdentifier,
                    principalTable: "Users",
                    principalColumn: "Identifier",
                    onDelete: ReferentialAction.Cascade);
            });

        migrationBuilder.CreateTable(
            name: "UserBookmarkedWorks",
            columns: table => new
            {
                UserIdentifier = table.Column<Guid>(type: "TEXT", nullable: false),
                CreativeWorkIdentifier = table.Column<Guid>(type: "TEXT", nullable: false),
                BookmarkedByUsersIdentifier = table.Column<Guid>(type: "TEXT", nullable: false),
                BookmarkedWorksIdentifier = table.Column<Guid>(type: "TEXT", nullable: false)
            },
            constraints: table =>
            {
                table.PrimaryKey("PK_UserBookmarkedWorks", x => new { x.UserIdentifier, x.CreativeWorkIdentifier });
                table.ForeignKey(
                    name: "FK_UserBookmarkedWorks_CreativeWorks_BookmarkedWorksIdentifier",
                    column: x => x.BookmarkedWorksIdentifier,
                    principalTable: "CreativeWorks",
                    principalColumn: "Identifier",
                    onDelete: ReferentialAction.Cascade);
                table.ForeignKey(
                    name: "FK_UserBookmarkedWorks_Users_BookmarkedByUsersIdentifier",
                    column: x => x.BookmarkedByUsersIdentifier,
                    principalTable: "Users",
                    principalColumn: "Identifier",
                    onDelete: ReferentialAction.Cascade);
            });

        migrationBuilder.CreateTable(
            name: "UserLikedWorks",
            columns: table => new
            {
                UserIdentifier = table.Column<Guid>(type: "TEXT", nullable: false),
                CreativeWorkIdentifier = table.Column<Guid>(type: "TEXT", nullable: false),
                LikedByUsersIdentifier = table.Column<Guid>(type: "TEXT", nullable: false),
                LikedWorksIdentifier = table.Column<Guid>(type: "TEXT", nullable: false)
            },
            constraints: table =>
            {
                table.PrimaryKey("PK_UserLikedWorks", x => new { x.UserIdentifier, x.CreativeWorkIdentifier });
                table.ForeignKey(
                    name: "FK_UserLikedWorks_CreativeWorks_LikedWorksIdentifier",
                    column: x => x.LikedWorksIdentifier,
                    principalTable: "CreativeWorks",
                    principalColumn: "Identifier",
                    onDelete: ReferentialAction.Cascade);
                table.ForeignKey(
                    name: "FK_UserLikedWorks_Users_LikedByUsersIdentifier",
                    column: x => x.LikedByUsersIdentifier,
                    principalTable: "Users",
                    principalColumn: "Identifier",
                    onDelete: ReferentialAction.Cascade);
            });

        migrationBuilder.CreateTable(
            name: "WorksInAlbum",
            columns: table => new
            {
                AlbumIdentifier = table.Column<Guid>(type: "TEXT", nullable: false),
                CreativeWorkIdentifier = table.Column<Guid>(type: "TEXT", nullable: false),
                PartOfAlbumIdentifier = table.Column<Guid>(type: "TEXT", nullable: false),
                WorksIdentifier = table.Column<Guid>(type: "TEXT", nullable: false)
            },
            constraints: table =>
            {
                table.PrimaryKey("PK_WorksInAlbum", x => new { x.AlbumIdentifier, x.CreativeWorkIdentifier });
                table.ForeignKey(
                    name: "FK_WorksInAlbum_Albums_PartOfAlbumIdentifier",
                    column: x => x.PartOfAlbumIdentifier,
                    principalTable: "Albums",
                    principalColumn: "Identifier",
                    onDelete: ReferentialAction.Cascade);
                table.ForeignKey(
                    name: "FK_WorksInAlbum_CreativeWorks_WorksIdentifier",
                    column: x => x.WorksIdentifier,
                    principalTable: "CreativeWorks",
                    principalColumn: "Identifier",
                    onDelete: ReferentialAction.Cascade);
            });

        migrationBuilder.CreateTable(
            name: "WorksTaggedWith",
            columns: table => new
            {
                CreativeWorkIdentifier = table.Column<Guid>(type: "TEXT", nullable: false),
                TagIdentifier = table.Column<Guid>(type: "TEXT", nullable: false),
                TaggedWorksIdentifier = table.Column<Guid>(type: "TEXT", nullable: false),
                TagsIdentifier = table.Column<Guid>(type: "TEXT", nullable: false)
            },
            constraints: table =>
            {
                table.PrimaryKey("PK_WorksTaggedWith", x => new { x.CreativeWorkIdentifier, x.TagIdentifier });
                table.ForeignKey(
                    name: "FK_WorksTaggedWith_CreativeWorks_TaggedWorksIdentifier",
                    column: x => x.TaggedWorksIdentifier,
                    principalTable: "CreativeWorks",
                    principalColumn: "Identifier",
                    onDelete: ReferentialAction.Cascade);
                table.ForeignKey(
                    name: "FK_WorksTaggedWith_Tags_TagsIdentifier",
                    column: x => x.TagsIdentifier,
                    principalTable: "Tags",
                    principalColumn: "Identifier",
                    onDelete: ReferentialAction.Cascade);
            });

        migrationBuilder.CreateIndex(
            name: "IX_Albums_OwnerIdentifier",
            table: "Albums",
            column: "OwnerIdentifier");

        migrationBuilder.CreateIndex(
            name: "IX_Authentications_UserIdentifier",
            table: "Authentications",
            column: "UserIdentifier");

        migrationBuilder.CreateIndex(
            name: "IX_CreativeWorks_OwnerIdentifier",
            table: "CreativeWorks",
            column: "OwnerIdentifier");

        migrationBuilder.CreateIndex(
            name: "IX_RestrictedByPermissions_AllowedForIdentifier",
            table: "RestrictedByPermissions",
            column: "AllowedForIdentifier");

        migrationBuilder.CreateIndex(
            name: "IX_RestrictedByPermissions_AllowsIdentifier",
            table: "RestrictedByPermissions",
            column: "AllowsIdentifier");

        migrationBuilder.CreateIndex(
            name: "IX_SearchQuery_Value",
            table: "SearchQuery",
            column: "Value");

        migrationBuilder.CreateIndex(
            name: "IX_UserBookmarkedAlbums_BookmarkedAlbumsIdentifier",
            table: "UserBookmarkedAlbums",
            column: "BookmarkedAlbumsIdentifier");

        migrationBuilder.CreateIndex(
            name: "IX_UserBookmarkedAlbums_BookmarkedByUsersIdentifier",
            table: "UserBookmarkedAlbums",
            column: "BookmarkedByUsersIdentifier");

        migrationBuilder.CreateIndex(
            name: "IX_UserBookmarkedWorks_BookmarkedByUsersIdentifier",
            table: "UserBookmarkedWorks",
            column: "BookmarkedByUsersIdentifier");

        migrationBuilder.CreateIndex(
            name: "IX_UserBookmarkedWorks_BookmarkedWorksIdentifier",
            table: "UserBookmarkedWorks",
            column: "BookmarkedWorksIdentifier");

        migrationBuilder.CreateIndex(
            name: "IX_UserFollows_FollowsUsersIdentifier",
            table: "UserFollows",
            column: "FollowsUsersIdentifier");

        migrationBuilder.CreateIndex(
            name: "IX_UserLikedAlbums_LikedAlbumsIdentifier",
            table: "UserLikedAlbums",
            column: "LikedAlbumsIdentifier");

        migrationBuilder.CreateIndex(
            name: "IX_UserLikedAlbums_LikedByUsersIdentifier",
            table: "UserLikedAlbums",
            column: "LikedByUsersIdentifier");

        migrationBuilder.CreateIndex(
            name: "IX_UserLikedWorks_LikedByUsersIdentifier",
            table: "UserLikedWorks",
            column: "LikedByUsersIdentifier");

        migrationBuilder.CreateIndex(
            name: "IX_UserLikedWorks_LikedWorksIdentifier",
            table: "UserLikedWorks",
            column: "LikedWorksIdentifier");

        migrationBuilder.CreateIndex(
            name: "IX_UserPermissions_PermissionsIdentifier",
            table: "UserPermissions",
            column: "PermissionsIdentifier");

        migrationBuilder.CreateIndex(
            name: "IX_UserPermissions_UsersIdentifier",
            table: "UserPermissions",
            column: "UsersIdentifier");

        migrationBuilder.CreateIndex(
            name: "IX_WorksInAlbum_PartOfAlbumIdentifier",
            table: "WorksInAlbum",
            column: "PartOfAlbumIdentifier");

        migrationBuilder.CreateIndex(
            name: "IX_WorksInAlbum_WorksIdentifier",
            table: "WorksInAlbum",
            column: "WorksIdentifier");

        migrationBuilder.CreateIndex(
            name: "IX_WorksTaggedWith_TaggedWorksIdentifier",
            table: "WorksTaggedWith",
            column: "TaggedWorksIdentifier");

        migrationBuilder.CreateIndex(
            name: "IX_WorksTaggedWith_TagsIdentifier",
            table: "WorksTaggedWith",
            column: "TagsIdentifier");
    }

    /// <inheritdoc />
    protected override void Down(MigrationBuilder migrationBuilder)
    {
        migrationBuilder.DropTable(
            name: "Authentications");

        migrationBuilder.DropTable(
            name: "RestrictedByPermissions");

        migrationBuilder.DropTable(
            name: "SearchQuery");

        migrationBuilder.DropTable(
            name: "UserBookmarkedAlbums");

        migrationBuilder.DropTable(
            name: "UserBookmarkedWorks");

        migrationBuilder.DropTable(
            name: "UserFollows");

        migrationBuilder.DropTable(
            name: "UserLikedAlbums");

        migrationBuilder.DropTable(
            name: "UserLikedWorks");

        migrationBuilder.DropTable(
            name: "UserPermissions");

        migrationBuilder.DropTable(
            name: "WorksInAlbum");

        migrationBuilder.DropTable(
            name: "WorksTaggedWith");

        migrationBuilder.DropTable(
            name: "RestrictionModel");

        migrationBuilder.DropTable(
            name: "Permissions");

        migrationBuilder.DropTable(
            name: "Albums");

        migrationBuilder.DropTable(
            name: "CreativeWorks");

        migrationBuilder.DropTable(
            name: "Tags");

        migrationBuilder.DropTable(
            name: "Users");
    }
}
